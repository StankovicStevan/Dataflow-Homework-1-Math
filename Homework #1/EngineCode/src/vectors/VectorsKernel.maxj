/**
 * Document: MaxCompiler Tutorial (maxcompiler-tutorial.pdf)
 * Chapter: 6
 * Example: 3
 * Summary:
 *        Kernel that doubles values in a vector.
 */
package vectors;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;

class VectorsKernel extends Kernel {

	VectorsKernel(KernelParameters parameters, int vectorSize) {
		super(parameters);

		DFEVectorType<DFEVar> vectorType =
			new DFEVectorType<DFEVar>(dfeUInt(32), vectorSize);

		// Input
		DFEVector<DFEVar> inVector1 = io.input("inVector1", vectorType);
		DFEVector<DFEVar> inVector2 = io.input("inVector2", vectorType);

		// Explicitly double each vector element
		DFEVector<DFEVar> resultVector = vectorType.newInstance(this);

		for (int i = 0; i < Math.sqrt(vectorSize); i++){
			for (int j = 0; j < Math.sqrt(vectorSize); j++){
			    //DFEVar temp = inVector1[0] - inVector1[0];
			    DFEVar temp = constant.var(dfeUInt(32), 0);
			    for (int k = 0; k < Math.sqrt(vectorSize); k++){
			        temp += inVector1[i*(int)Math.sqrt(vectorSize) + k] * inVector2[k*(int)Math.sqrt(vectorSize)+j];
			    }
			    resultVector[i*(int)Math.sqrt(vectorSize)+j] <== temp;
			}
		}
		//Output
		io.output("outVector", resultVector, vectorType);
	}

}
